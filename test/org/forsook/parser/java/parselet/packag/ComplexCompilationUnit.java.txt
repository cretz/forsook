package foo.bar.meh;

import single.type.mport.Declaration;
import type.on.demand.mport.declaration.*;
import static single.stat.mport.Declaration;
import static stat.on.demand.mport.declaration.*;

@NormalAnnotation(value = "value")
@MarkerAnnotation
@SingleElementAnnotation("value")
public class ComplexCompilationUnit {

    public static void main(String[] args) {
        //local variable declaration
        int sanity = Integer.MIN_VALUE;
        //local class declaration
        class LocalClasses extends AreForIdiots {
        }
        //array
        String[] a = { "look", "no", "new" };
        //try-catch
        try {
            killMyself();
        } catch (Exception e) {
            hireHitman();
        } finally {
            coverTracks();
        }
        //switch
        switch (percentOfCoverage) {
        case 1:
        case 2:
            meh();
            break;
        case 100:
            yeahRight();
        default:
            coverageDoesntMatterAnyways();
        }
        //basic for
        for (int hours = 0; i < 2; i++) {
            workHard();
        }
        //do statement
        do {
            yourMom();
        } while (iFeelLikeIt);
        //enhanced for
        for (TestCase test : testsIDontWannaWrite()) {
            test.findAnAutomatedWayToDoThis();
        }
        //if
        if (can) {
            doIt();
        } else if (cant) {
            program();
        } else {
            solveIndecision();
        }
        //short if
        if (iHateBraces)
            whoCares();
        //while
        while (thisParserStillSucks) {
            keepExtendingThisMethod();
        }
        //assert
        assert notCarpalTunnel : "Pick a less verbose language";
        //label
        labelsAreDangerous:
            iKnow();
        //synchronized
        synchronized (women) {
            fakeMonogamy();
        }
        //throw
        throw new IWishMostExceptionsWereUnchecked();
        //return
        return toWhereYouCameFrom;
        //break
        break yoSelfFoo;
        //continue
        continue makingMyJavaParser;
        //cast
        a = (ChickenOfTheInfinite) b;
    }

    public ComplexCompilationUnit() {
        //explicit
        this("meh");
    }
    
    public ComplexCompilationUnit() {
        //explicit
        super("meh");
    }
    
    public ComplexCompilationUnit() {
        //explicit
        <A, B>super("meh");
    }
    
    public enum MyEnum {
        VAL_ONE,
        VAL_TWO("val"),
        VAL_THREE {
            void hey() {
            }
        };
        
        private MyEnum() {
        }
    }
}
